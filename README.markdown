# Book Recommendation System

This is a Flask-based web application that provides a book recommendation system using collaborative filtering with the Singular Value Decomposition (SVD) algorithm from the Surprise library. The application allows users to browse books, rate them, create and manage collections, and receive personalized book recommendations. It also includes an admin interface for managing books and users.

## Features

- **User Authentication**: Users can log in with their User ID and a static password (`Abc@123`).
- **Book Recommendations**: Personalized book recommendations based on user ratings using the SVD model.
- **Book Search and Browsing**: Users can search for books by ISBN, title, or author and browse books alphabetically with pagination.
- **Book Collections**: Users can create, edit, and manage personal or public collections of books.
- **Book Ratings**: Users can rate books, and the system displays average ratings and the number of ratings for each book.
- **Admin Panel**: Admins can manage books and users, including creating, editing, and marking them as deleted (soft delete).
- **Database Integration**: Uses SQL Server to store book, user, rating, and collection data.

## Tech Stack

- **Backend**: Python, Flask
- **Machine Learning**: Surprise library (SVD algorithm for collaborative filtering)
- **Database**: Microsoft SQL Server with `pyodbc` for connectivity
- **Frontend**: HTML templates with Bootstrap for styling
- **Dependencies**: `pandas`, `pickle`, `flask-paginate`

## Prerequisites

- Python 3.8+
- SQL Server instance running locally or remotely
- Required Python packages (install via `pip`):
  ```bash
  pip install flask pandas surprise pyodbc flask-paginate
  ```

## Project Structure

```
├── app.py                  # Main Flask application
├── train_model.py          # Script for training and saving the SVD model
├── templates/              # HTML templates for the frontend
│   ├── login.html          # Login page
│   ├── home.html           # User homepage with recommendations and read books
│   ├── book_detail.html    # Book details and rating page
│   ├── collections.html    # User collections page
│   ├── collection_detail.html # Collection details and editing page
│   ├── view_collection.html # View public collections
│   ├── search_results.html # Search results page
│   ├── a-z.html            # Alphabetical book browsing page
│   ├── admin_login.html    # Admin login page
│   ├── admin_books.html    # Admin book management page
│   ├── admin_users.html    # Admin user management page
├── svd_model.pkl           # Pre-trained SVD model (generated by train_model.py)
└── README.md               # This file
```

## Database Setup

1. Set up a SQL Server database named `DBFinal21` (or update the `DATABASE` variable in `app.py`).
2. Create the following tables:
   - **Books**:
     ```sql
     CREATE TABLE Books (
         ISBN VARCHAR(13) PRIMARY KEY,
         Book_Title VARCHAR(255),
         Book_Author VARCHAR(255),
         Year_Of_Publication INT,
         Publisher VARCHAR(255),
         Image_URL_S VARCHAR(255),
         Image_URL_M VARCHAR(255),
         Image_URL_L VARCHAR(255)
     );
     ```
   - **Users**:
     ```sql
     CREATE TABLE Users (
         User_ID INT PRIMARY KEY,
         Location VARCHAR(255),
         Age INT
     );
     ```
   - **Ratings**:
     ```sql
     CREATE TABLE Ratings (
         User_ID INT,
         ISBN VARCHAR(13),
         Book_Rating INT,
         PRIMARY KEY (User_ID, ISBN),
         FOREIGN KEY (User_ID) REFERENCES Users(User_ID),
         FOREIGN KEY (ISBN) REFERENCES Books(ISBN)
     );
     ```
   - **Collections**:
     ```sql
     CREATE TABLE Collections (
         ID INT IDENTITY(1,1) PRIMARY KEY,
         name VARCHAR(255),
         User_ID INT,
         is_public BIT,
         FOREIGN KEY (User_ID) REFERENCES Users(User_ID)
     );
     ```
   - **Books_in_Collections**:
     ```sql
     CREATE TABLE Books_in_Collections (
         collection_id INT,
         ISBN VARCHAR(13),
         PRIMARY KEY (collection_id, ISBN),
         FOREIGN KEY (collection_id) REFERENCES Collections(ID),
         FOREIGN KEY (ISBN) REFERENCES Books(ISBN)
     );
     ```

3. Populate the database with sample data for books, users, and ratings.

## Installation

1. Clone the repository:
   ```bash
   git clone <repository-url>
   cd <repository-directory>
   ```

2. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

3. Update database connection details in both `train_model.py` and `app.py`:
   ```python
   DATABASE = 'DBFinal21'
   USERNAME = 'your_username'
   PASSWORD = 'your_password'
   DRIVER = 'SQL Server'
   SERVER = 'your_server_name'
   ```

4. Train the SVD model:
   ```bash
   python train_model.py
   ```
   This generates `svd_model.pkl` used for recommendations.

5. Run the Flask application:
   ```bash
   python app.py
   ```
   The app will be available at `http://127.0.0.1:5000`.

## Usage

### User Features
- **Login**: Access the system at `/login` using a valid User ID from the database and the password `Abc@123`.
- **Home Page**: View recommended books and previously read books at `/`.
- **Book Details**: View book details, submit ratings, and add books to collections at `/book/<isbn>`.
- **Collections**: Manage personal collections at `/collections` and view public collections at `/collection/view/<id>`.
- **Search**: Search for books by ISBN, title, or author at `/search?data=<query>`.
- **Browse A-Z**: Browse books alphabetically with pagination at `/a-z`.

### Admin Features
- **Admin Login**: Log in at `/admin/login` with username `admin` and password `admin`.
- **Manage Books**: View, create, edit, or mark books as deleted at `/admin/books`.
- **Manage Users**: View, create, edit, or mark users as deleted at `/admin/users`.

### Soft Deletion
- Books are marked as deleted by setting `Image_URL_S = '987654321'`.
- Users are marked as deleted by setting `Age = 987654321`.

## Notes

- The application uses a static password (`Abc@123`) for user login and (`admin`, `admin`) for admin login. For production, implement proper authentication mechanisms.
- The SVD model is pre-trained and saved as `svd_model.pkl`. Re-run `train_model.py` if the ratings data changes significantly.
- Ensure the SQL Server database is accessible and properly configured.
- The application runs in debug mode (`app.run(debug=True)`). Disable this in production.

## Future Improvements

- Implement secure user authentication with hashed passwords.
- Add user registration functionality.
- Enhance search with more advanced filtering options.
- Improve recommendation accuracy with hybrid models (content-based + collaborative filtering).
- Add support for uploading book cover images.
- Implement user profile management.

## License

This project is licensed under the MIT License. See the `LICENSE` file for details.

---

For any issues or questions, please open an issue on the repository or contact the project maintainer.